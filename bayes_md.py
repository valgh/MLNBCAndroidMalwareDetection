#bayes_md.py
#let's read the directory in which our files are stored. For each file, add it to the data structure

import os
import glob
cwd = os.getcwd()
directory = cwd+"/drebin/drebin/feature_vectors/"
list_of_apps = glob.glob(directory+"*")
#now, to implement the datasets
import pandas as pd
csv_directory = cwd+"/drebin/drebin/"
df = pd.read_csv(csv_directory+"sha256_family.csv", dtype = "str", squeeze=True)
malware_dataset = df.to_dict(orient="records")
malwares = {}
for row in malware_dataset:
    malwares[row["sha256"]] = row["sha256"]
list_of_malwares = (list)(malwares)
list_of_malwares_in_directory = []
for line in list_of_malwares:
    list_of_malwares_in_directory.append(cwd+"/drebin/feature_vectors/"+line)

#original dataset (Total: 129013)
list_of_apps_reduced = list_of_apps[:38703]
training_data = {}
for app in list_of_apps_reduced:
    if app in list_of_malwares_in_directory:
        training_data[app] = "Malware"
    else:
        training_data[app] = "Safe"

X = list(training_data.keys())
Y = list(training_data.values())

from sklearn.model_selection import train_test_split

#split into train data (70%) and test/evaluation data (30%)
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, shuffle=True)


#Bayes_Classifier class implements a Naive Bayes Classifier to carry out the detection task.

class Bayes_Classifier(object):

    def __init__(self, xtrain, ytrain):
        self.x_train = xtrain
        self.y_train = ytrain
        self.probMalware = {}
        self.probSafe = {}

    def fit(self):
        features = ["feature", "permission","api_call", "url"] #only 4 features were considered.
        total_malwares = 0
        total_safe = 0
        malwares = []
        safe = []

        i = 0
        while i<len(self.x_train):
            if self.y_train[i] == "Malware":
                file = open(self.x_train[i], "r")
                for line in file:
                    if any(s in line for s in features):
                        total_malwares = total_malwares + 1
                        malwares.append(line)
                    else:
                        continue
            else:
                file = open(self.x_train[i], "r")
                for line in file:
                    if any(s in line for s in features):
                        total_safe = total_safe + 1
                        safe.append(line)
                    else:
                        continue
            i = i +1

        malware_lines = {}
        safe_lines = {}
        from collections import Counter
        malware_lines = Counter(malwares)
        safe_lines = Counter(safe)

        for line in malware_lines:
            self.probMalware[line] = (malware_lines[line]+1)/(total_malwares+2)
        for line in safe_lines:
            self.probSafe[line] = (safe_lines[line]+1)/(total_safe+2)

        return

    def predict(self, data):
        result = {}
        malicious_score = {}
        safe_score = {}
        for file in data:
            malicious_score[file] = 0
            safe_score[file] = 0
            f = open(file, "r")
            for line in f:
                if line in self.probMalware:
                    malicious_score[file] = malicious_score[file] + self.probMalware[line]
                elif line in self.probSafe:
                    safe_score[file] = safe_score[file] + self.probSafe[line]
                else:
                    continue
            if malicious_score[file]>=safe_score[file]:
                result[file] = "Malware"
            else:
                result[file] = "Safe"

        return result

classifier = Bayes_Classifier(X_train, y_train)
classifier.fit()
predictions = list(classifier.predict(X_test).values())
print(predictions)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, predictions)
print("Accuracy Score: ", acc)
if acc>0.5:
    print("Accuracy Test Passed.")
else:
    print("Accuracy Test Failed.")

from sklearn.metrics import confusion_matrix
print("\nConfusion Matrix: \n")
print(confusion_matrix(y_test, predictions, labels=['Malware', 'Safe']))

from sklearn.metrics import classification_report
target_names = ['Malware', 'Safe']
report = classification_report(y_test, predictions, target_names = target_names)
print("\n")
print(report)
import matplotlib.pyplot as plt
import scikitplot as skplt
skplt.metrics.plot_confusion_matrix(y_test, predictions, normalize=True)
plt.show()
